{"version":3,"sources":["Contexts/NavigationContext.js","Containers/CompanysPage.js","Containers/GamePage.js","Components/Navbar.js","Containers/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["NavigationContext","React","createContext","NavigationProvider","props","console","debug","navHook","useState","menu","smallNavbar","Provider","value","children","CompanysPage","log","GamePage","useContext","nav","setNav","className","onScroll","event","target","scrollTop","prevNav","Navbar","choices","height","setHeight","useEffect","small","style","borderBottomRightRadius","borderBottomLeftRadius","border","width","marginLeft","marginRight","map","choice","key","onClick","MainPage","smallHeight","prevState","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yRAEaA,EAAoBC,IAAMC,gBAE1BC,EAAqB,SAAAC,GAChCC,QAAQC,MAAM,iCACd,IAAMC,EAAUC,mBAAS,CACvBC,KAAM,OACNC,aAAa,IAEf,OACE,kBAACV,EAAkBW,SAAnB,CAA4BC,MAAOL,GAChCH,EAAMS,WCVAC,G,MAAe,WAE1B,OADAT,QAAQU,IAAI,2BACL,gD,yjBCCF,IAAMC,EAAW,WACtBX,QAAQU,IAAI,uBADgB,MAENE,qBAAWjB,GAFL,mBAErBkB,EAFqB,KAEhBC,EAFgB,KAc5B,OACE,yBAAKC,UAAU,WAAWC,SAZP,SAAAC,GACfA,EAAMC,OAAOC,UAAY,MAA2B,IAApBN,EAAIR,YACtCS,GAAO,SAACM,EAASrB,GACf,OAAO,EAAP,GAAYqB,EAAZ,CAAqBf,aAAa,OAE3BY,EAAMC,OAAOC,WAAa,MAA2B,IAApBN,EAAIR,aAC9CS,GAAO,SAACM,EAASrB,GACf,OAAO,EAAP,GAAYqB,EAAZ,CAAqBf,aAAa,SAMpC,yBAAKU,UAAU,gDACf,yBAAKA,UAAU,iDACf,yBAAKA,UAAU,2CACb,yBAAKA,UAAU,gBAEjB,yBAAKA,UAAU,wDACb,yBAAKA,UAAU,SAAf,sGCvBKM,G,MAAS,SAAAtB,GACpBC,QAAQU,IAAI,qBACZ,IAAMY,EAAUvB,EAAMuB,QAFO,EAGDnB,mBAASJ,EAAMwB,QAHd,mBAGtBA,EAHsB,KAGdC,EAHc,KAa7B,OARAC,qBAAU,WACJ1B,EAAM2B,MACRF,EAAUzB,EAAMwB,OAAS,IAEzBC,EAAUzB,EAAMwB,UAEjB,CAACxB,EAAM2B,QAGR,yBACEX,UAAU,SACVY,MACE5B,EAAM2B,MACF,CACEH,OAAQA,EAAS,KACjBK,wBAAyB,OACzBC,uBAAwB,OACxBC,OAAQ,sBACRC,MAAO,OACPC,WAAY,OACZC,YAAa,QAEf,CACEV,OAAQA,EAAS,OAIxBD,EAAQY,KAAI,SAAAC,GACX,OACE,4BAAQC,IAAKD,EAAQE,QAAS,kBAAMtC,EAAMsC,QAAQF,KAC/CA,S,oOChCN,IAAMG,EAAW,WACtBtC,QAAQU,IAAI,uBADgB,MAENE,qBAAWjB,GAFL,mBAErBkB,EAFqB,KAEhBC,EAFgB,KAW5B,OACE,yBAAKC,UAAU,YACb,kBAAC,EAAD,CACEwB,YAAa,GACbhB,OAAQ,GACRD,QAbU,CAAC,OAAQ,WAcnBe,QAZc,SAAAF,GAClBrB,GAAO,SAAC0B,EAAWzC,GACjB,O,yVAAO,IAAKyC,EAAZ,CAAuBpC,KAAM+B,QAW3BT,MAAOb,EAAIR,cAEC,SAAbQ,EAAIT,KAAkB,kBAAC,EAAD,MAAe,KACxB,YAAbS,EAAIT,KAAqB,kBAAC,EAAD,MAAmB,OCdpCqC,MAVf,WACE,OACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,SCIY2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9d5a7a99.chunk.js","sourcesContent":["import React, { useContext, useState } from \"react\";\n\nexport const NavigationContext = React.createContext();\n\nexport const NavigationProvider = props => {\n  console.debug(\"NavigationProvider was called\");\n  const navHook = useState({\n    menu: \"Game\",\n    smallNavbar: false\n  });\n  return (\n    <NavigationContext.Provider value={navHook}>\n      {props.children}\n    </NavigationContext.Provider>\n  );\n};\n","import React from \"react\";\n\nexport const CompanysPage = () => {\n  console.log(\"ComapnysPage was called\");\n  return <div>Companys Page</div>;\n};\n","import React, { useContext, useCallback, useEffect, useRef } from \"react\";\nimport \"../Styles/GameStyle.scss\";\nimport { NavigationContext } from \"../Contexts/NavigationContext\";\nimport { CompanysPage } from \"./CompanysPage\";\n\nexport const GamePage = () => {\n  console.log(\"GamePage was called\");\n  const [nav, setNav] = useContext(NavigationContext);\n  const handleScroll = event => {\n    if (event.target.scrollTop > 150 && nav.smallNavbar === false) {\n      setNav((prevNav, props) => {\n        return { ...prevNav, smallNavbar: true };\n      });\n    } else if (event.target.scrollTop <= 150 && nav.smallNavbar === true) {\n      setNav((prevNav, props) => {\n        return { ...prevNav, smallNavbar: false };\n      });\n    }\n  };\n  return (\n    <div className=\"parallax\" onScroll={handleScroll}>\n      <div className=\"parallax__layer parallax__layer--background\"></div>\n      <div className=\"parallax__layer parallax__layer--background2\"></div>\n      <div className=\"parallax__layer parallax__layer--layer1\">\n        <div className=\"quoteFrame\"></div>\n      </div>\n      <div className=\"parallax__layer parallax__layer--base flex-container\">\n        <div className=\"quote\">\n          And he shall rule them with a rod of iron, and as the vessels of a\n          potter, shall they be broken\n        </div>\n      </div>\n    </div>\n  );\n};\n\n/*              And he shall rule them with a rod of iron, and as the vessels of a\n              potter, shall they be broken*/\n","import React, { useEffect, useState, useContext } from \"react\";\nimport \"../Styles/NavStyle.scss\";\nimport { NavigationContext } from \"../Contexts/NavigationContext\";\n\nexport const Navbar = props => {\n  console.log(\"Navbar was called\");\n  const choices = props.choices;\n  const [height, setHeight] = useState(props.height);\n\n  useEffect(() => {\n    if (props.small) {\n      setHeight(props.height - 35);\n    } else {\n      setHeight(props.height);\n    }\n  }, [props.small]);\n\n  return (\n    <div\n      className=\"NavBar\"\n      style={\n        props.small\n          ? {\n              height: height + \"px\",\n              borderBottomRightRadius: \"50px\",\n              borderBottomLeftRadius: \"50px\",\n              border: \"1px #ffffffff solid\",\n              width: \"50vw\",\n              marginLeft: \"25vw\",\n              marginRight: \"25vw\"\n            }\n          : {\n              height: height + \"px\"\n            }\n      }\n    >\n      {choices.map(choice => {\n        return (\n          <button key={choice} onClick={() => props.onClick(choice)}>\n            {choice}\n          </button>\n        );\n      })}\n    </div>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { NavigationContext } from \"../Contexts/NavigationContext\";\nimport { GamePage } from \"./GamePage\";\nimport { CompanysPage } from \"./CompanysPage\";\nimport { Navbar } from \"../Components/Navbar\";\nimport \"../Styles/MainStyle.scss\";\n\nexport const MainPage = () => {\n  console.log(\"MainPage was called\");\n  const [nav, setNav] = useContext(NavigationContext);\n  const choices = [\"Game\", \"Company\"];\n\n  const handleClick = choice => {\n    setNav((prevState, props) => {\n      return { ...prevState, menu: choice };\n    });\n  };\n\n  return (\n    <div className=\"MainPage\">\n      <Navbar\n        smallHeight={40}\n        height={75}\n        choices={choices}\n        onClick={handleClick}\n        small={nav.smallNavbar}\n      />\n      {nav.menu === \"Game\" ? <GamePage /> : null}\n      {nav.menu === \"Company\" ? <CompanysPage /> : null}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { MainPage } from \"./Containers/MainPage\";\nimport { NavigationProvider } from \"./Contexts/NavigationContext\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavigationProvider>\n        <MainPage />\n      </NavigationProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./Styles/BodyStyle.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}